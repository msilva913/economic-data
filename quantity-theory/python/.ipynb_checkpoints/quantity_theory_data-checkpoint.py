{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "db3b56cf",
   "metadata": {},
   "source": [
    "# Quantity Theory of Money Data\n",
    "\n",
    "This program produces two data sets that can be used to assess the predictions of the quantity theory of money in closed and open economy settings.\n",
    "\n",
    "## Background\n",
    "\n",
    "**The quantity theory.** The primary implication of the quantity theory of money is that the average inflation rate for some country $k$ will equal the average growth rate of its money supply less the average growth rate of its real GDP:\n",
    "\n",
    "\\begin{align}\n",
    "\\pi_k & = g^M_k - g^Y_k\n",
    "\\end{align}\n",
    "\n",
    "Holding the growth rate of real GDP constant, a one percentage point increase in average money growth implies a one percentage point increase in average inflation.\n",
    "\n",
    "**The Fisher effect.** Next, combining the quantity theory with the Fisher equation and assuming equal real interest rates across countries, the difference between the nominal interest rate of country $k$ and the nominal interest rate of the US is equal to the difference in the average \n",
    "\n",
    "\\begin{align}\n",
    "i_k - i_{US} & = \\pi_k - \\pi_{US}\\\\\n",
    "             & = (g^M_k - g^M_{US}) - (g^Y_k - g^Y_{US})\\\\\n",
    "             & \\approx g^M_k - g^M_{US}\n",
    "\\end{align}\n",
    "\n",
    "where the final line follows because the average growth rate of real GDP for the US is close to the world average. Holding the growth rate of real GDP constant, a one percentage point increase in average money growth for country $k$ implies a one percentage point increase in the average nominal interest rate in country $k$ relative to the US.\n",
    "\n",
    "**Relative PPP.** Finally, combining the quantity theory with purchasing power parity, the average depreciation of the exchange rate of the currency of country $k$ relative to the the US dollar equals the average inflation differential between the US and the \n",
    "\n",
    "\\begin{align}\n",
    "g^E_k & = \\pi_k - \\pi_{US} \\\\\n",
    "      & = (g^M_{k} - g^M_{US}) - (g^Y_k - g^Y_{US})\\\\\n",
    "     & \\approx g^M_{k} - g^M_{US}\n",
    "\\end{align}\n",
    "\n",
    "where the nominal exchange rate $E_k$ has units of the country $k$ currency per US dollar. Holding the growth rate of real GDP constant, a one percentage point increase in average money growth for country $k$ implies a one percentage point increase in the average rate of deprecitation in the exchange for the currency of country $k$ relative to the US dollar. See, for example the discussion in Chapter 14 of Feenstra and Taylor (2021).\n",
    "\n",
    "\n",
    "## Output\n",
    "\n",
    "The first file is called `quantity_theory_data.csv` and contains the following data columns for about 160 countries:\n",
    "\n",
    "Column name  | Description                                        |\n",
    "-------------|----------------------------------------------------|\n",
    "country      | Country name                                       |\n",
    "iso code     | 3-letter ISO code                                  |\n",
    "observations | Number of consecutive years of observations        |\n",
    "money growth | Average growth rate of broad money supply          |\n",
    "inflation    | Average growth rate of nominal                     |\n",
    "gdp growth   | Average growth rate of real GDP                    |\n",
    "income group | Whether country is high, middle, or low income     |\n",
    "oecd         | Whether the country is in the OECD                 |\n",
    "\n",
    "\n",
    "The second file, `quantity_theory_data_open.csv`, contains the same columns as the first and additionally:\n",
    "\n",
    "Column name                | Description                                        |\n",
    "---------------------------|----------------------------------------------------|\n",
    "nominal interest rate\t   | Average lending rate                               |\n",
    "exchange rate depreciation | Average growth of exchange rate                    |\n",
    "\n",
    "The files are stored in the `..\\csv` directory.\n",
    "\n",
    "## Construction\n",
    "\n",
    "Raw data are from the World Bank's World Development Indicators (WDI, https://datatopics.worldbank.org/world-development-indicators/). These data are obtained:\n",
    "\n",
    "WDI ID         | Name                                       |\n",
    "---------------|--------------------------------------------|\n",
    "FM.LBL.BMNY.CN | Broad money (current LCU)                  |\n",
    "NY.GDP.DEFL.ZS | GDP deflator (base year varies by country) |\n",
    "NY.GDP.MKTP.KD | GDP (constant 2015 US\\\\$)                  |\n",
    "PA.NUS.FCRF    | Official exchange rate (LCU per US\\\\$)     |\n",
    "FR.INR.LEND    | Lending interest rate (%)                  |\n",
    "\n",
    "For each country, I find the largest date range that contains consecutive non-NaN values for the required indicators, either the first three or all five. Then if there is at least 10 years of data available, I compute the required averages.\n",
    "\n",
    "## Further reading\n",
    "\n",
    "Read more about empirical applications of the quantity theory:\n",
    "\n",
    "* Feenstra, Robert C. and Alan M. Taylor. 2021. *International Economics* 5th ed.\n",
    "\n",
    "* McCandless, George and Warren Weber. 1995. \"Some Monetary Facts\" Federal Reserve Bank of Minneapolis *Quarterly Review*. (https://www.minneapolisfed.org/research/qr/qr1931.pdf)\n",
    "\n",
    "* Dwyer, Gerald P. and R.W. Hafer. 1999. \"Are Money Growth and Inflation Still Related?\" Federal Reserve Bank of\n",
    "Atlanta *Economic Review*. (https://fraser.stlouisfed.org/title/economic-review-federal-reserve-bank-atlanta-884/second-quarter-1999-601600/money-growth-inflation-still-related-581622)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bb7cbd",
   "metadata": {},
   "source": [
    "## Preliminaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7ab2e085",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load modules\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import wbdata\n",
    "import os\n",
    "import shutil\n",
    "import getpass\n",
    "import requests\n",
    "import zipfile\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('classic')\n",
    "plt.rcParams['figure.facecolor'] = 'white'\n",
    "\n",
    "# OECD countries\n",
    "oecd_list = ['AUS','AUT','BEL','CAN','CHL','CZE','DNK','EST','FIN','FRA','DEU','GRC','HUN','ISL','IRL','ISR',\n",
    "             'ITA','JPN','KOR','LUX','MEX','NLD','NZL','NOR','POL','PRT','SVK','SVN','ESP','SWE','CHE','TUR',\n",
    "             'GBR','USA']\n",
    "\n",
    "# List of region and category codes to be droppped\n",
    "drop_list = ['AFE','AFR','AFW','ARB','BEA','BEC','BHI','BLA','BMN','BSS','CAA','CEA','CEB','CEU',\n",
    "             'CLA','CME','CSA','CSS','DEA','DEC','DFS','DLA','DMN','DNF','DNS','DSA','DSF','DSS',\n",
    "             'EAP','EAR','EAS','ECA','ECS','EMU','EUU','FCS','FXS','HIC','HPC','IBB','IBD','IBT',\n",
    "             'IDA','IDB','IDX','INX','LAC','LCN','LDC','LIC','LMC','LMY','LTE','MDE','MEA','MIC',\n",
    "             'MNA','NAC','NAF','NRS','NXS','OED','OSS','PRE','PSS','PST','RRS','SAS','SSA','SSF',\n",
    "             'SST','SXZ','TEA','TEC','TLA','TMN','TSA','TSS','UMC','WLD','XZN']\n",
    "\n",
    "# Dictionary of required indicators\n",
    "indicators = {\n",
    "    'FM.LBL.BMNY.CN':'broad money',\n",
    "    'NY.GDP.DEFL.ZS':'gdp deflator',\n",
    "    'NY.GDP.MKTP.KD':'real gdp',\n",
    "    'PA.NUS.FCRF':'exchange rate',\n",
    "    'FR.INR.LEND':'lending rate'\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f39106fd",
   "metadata": {},
   "source": [
    "## Import data using `wbdata`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e3cc11c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get all countries and regions available through WB API\n",
    "all_wb_countries = wbdata.get_countries()\n",
    "\n",
    "# Convert to a DataFrame with selected columns\n",
    "countries_and_regions = pd.DataFrame()\n",
    "\n",
    "for c in all_wb_countries:\n",
    "    countries_and_regions.loc[c['id'],'country name'] = c['name']\n",
    "    countries_and_regions.loc[c['id'],'income group'] = c['incomeLevel']['id']\n",
    "\n",
    "# Change income abbreviations to words\n",
    "countries_and_regions = countries_and_regions.replace('HIC','high').replace('UMC','middle').replace('LMC','middle').replace('LIC','low')\n",
    "\n",
    "# Name the index\n",
    "countries_and_regions.index.name = 'iso code'\n",
    "\n",
    "# # Print all countries and regions\n",
    "# with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "#     print(countries_and_regions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfac2bb9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "217"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Series of only countries\n",
    "countries = countries_and_regions[~countries_and_regions.index.isin(drop_list)].copy()\n",
    "\n",
    "# Identify which countries are in OECD\n",
    "countries['oecd'] = 'no'\n",
    "countries.loc[oecd_list,'oecd'] = 'yes'\n",
    "\n",
    "# Series of only regions\n",
    "regions = countries_and_regions[countries_and_regions.index.isin(drop_list)].copy()\n",
    "\n",
    "# Print all countries\n",
    "# with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "#     print(countries)\n",
    "    \n",
    "# Print all non-country regions\n",
    "# with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "#     print(regions)\n",
    "\n",
    "len(countries)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5257b886",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data into a DataFrame\n",
    "df=wbdata.get_dataframe(indicators,country=list(countries.index),keep_levels=False)\n",
    "\n",
    "# Sort the index\n",
    "df = df.sort_index()\n",
    "\n",
    "# Set 1960 value of money for Chile to NaN if value is 0\n",
    "if df.loc[('Chile','1960'),'broad money'] == 0:\n",
    "    df.loc[('Chile','1960'),'broad money'] = np.nan\n",
    "    \n",
    "# Set 2018 value of lending rate for New Zealand to NaN if value is 0\n",
    "if df.loc[('New Zealand','2018'),'lending rate'] == 0:\n",
    "    df.loc[('New Zealand','2018'),'lending rate'] = np.nan\n",
    "\n",
    "# Print the county, indicator, date combinations for which the indicator is 0\n",
    "for col in df.columns:\n",
    "    if len(df[df[col]==0][col])>0:\n",
    "        print(df[df[col]==0][col])\n",
    "        print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0efff36",
   "metadata": {},
   "source": [
    "## Import data by downloading all WDI indicators\n",
    "\n",
    "This section is only here in case wbpy becomes unusable. Downloads `WDI_csv.zip` and extracts in the current directory. The following files are extracted:\n",
    "\n",
    "* `WDISeries.csv`\n",
    "* `WDISeries-Time.csv`\n",
    "* `WDIFootNote.csv`\n",
    "* `WDIData.csv`\n",
    "* `WDICountry.csv`\n",
    "* `WDICountry-Series.csv`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e9085e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Download World Bank WDI data\n",
    "# url = \"http://databank.worldbank.org/data/download/WDI_csv.zip\"\n",
    "\n",
    "# file_name = \"WDI_csv.zip\"\n",
    "# u = requests.get(url)\n",
    "\n",
    "# with open(file_name, 'wb') as f:\n",
    "#     for chunk in u.iter_content(chunk_size=1024): \n",
    "#         if chunk: # filter out keep-alive new chunks\n",
    "#             f.write(chunk)\n",
    "#             f.flush()\n",
    "# f.close()\n",
    "\n",
    "# fh = open('WDI_csv.zip', 'rb')\n",
    "# z = zipfile.ZipFile(fh)\n",
    "# z.extractall()\n",
    "\n",
    "# # Delete zip file from WDI after extracting\n",
    "# os.remove('WDI_csv.zip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "21646e51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Load country data\n",
    "# countries = pd.read_csv('WDICountry.csv')\n",
    "\n",
    "# # Series of only countries\n",
    "# countries = countries[~countries['Country Code'].isin(drop_list)]\n",
    "\n",
    "# # Set ISO codes as index\n",
    "# countries.index = countries['Country Code']\n",
    "# countries.index.name = 'iso code'\n",
    "\n",
    "# # Select only name and income group columns and rename\n",
    "# countries = countries[['Table Name','Income Group']]\n",
    "# countries.columns = ['country name','income group']\n",
    "\n",
    "# # Change income abbreviations to words\n",
    "# countries.loc[:,'income group'] = countries['income group'].str.replace('High income','high').copy()\n",
    "# countries.loc[:,'income group'] = countries['income group'].str.replace('Upper middle income','middle').copy()\n",
    "# countries.loc[:,'income group'] = countries['income group'].str.replace('Lower middle income','middle').copy()\n",
    "# countries.loc[:,'income group'] = countries['income group'].str.replace('Low income','low').copy()\n",
    "\n",
    "# # Identify which countries are in OECD\n",
    "# countries['oecd'] = 'no'\n",
    "# countries.loc[oecd_list,'oecd'] = 'yes'\n",
    "\n",
    "# # Load indicator data\n",
    "# df_raw = pd.read_csv('WDIData.csv')\n",
    "\n",
    "# # Drop regions\n",
    "# df_raw = df_raw[df_raw['Country Code'].isin(countries.index)]\n",
    "\n",
    "# # Drop country code and indicator name\n",
    "# df_raw= df_raw.drop(['Country Code','Indicator Name'],axis=1)\n",
    "\n",
    "# # Drop unnecessary indicators\n",
    "# df_raw = df_raw[df_raw['Indicator Code'].isin(indicators.keys())]\n",
    "\n",
    "# # Drop superfluous unnamed columns\n",
    "# columns_to_drop = []\n",
    "\n",
    "# for c in df_raw.columns:\n",
    "#     if 'unnamed' in c.lower():\n",
    "#         columns_to_drop.append(c)\n",
    "# df_raw = df_raw.drop(columns_to_drop,axis=1)\n",
    "\n",
    "# # Replace indicator codes with names\n",
    "# for key,value in indicators.items():\n",
    "    \n",
    "#     df_raw.loc[:,'Indicator Code'] = df_raw['Indicator Code'].str.replace(key,value,regex=False)\n",
    "\n",
    "# # Empty DataFrame with county, year multiindex\n",
    "# df = pd.DataFrame(index=pd.MultiIndex.from_product([df_raw['Country Name'].unique(),df_raw.columns[2:]],names=['country','date']))\n",
    "# df = df.sort_index()\n",
    "\n",
    "# # Iterate over rows of df_raw and fill values in df\n",
    "# for i in df_raw.index:\n",
    "#     for c in df_raw.columns[2:]:\n",
    "        \n",
    "#         df.loc[(df_raw.loc[i,'Country Name'],c),df_raw.loc[i,'Indicator Code']] = df_raw.loc[i,c]\n",
    "\n",
    "# # Reorder columns\n",
    "# df = df[['broad money','gdp deflator','real gdp','exchange rate','lending rate']]\n",
    "\n",
    "# # Remove WDI csv files\n",
    "# for file in os.listdir():\n",
    "#     if file.endswith('csv') or file.endswith('zip'):\n",
    "#         os.remove(file)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fa8aeb6",
   "metadata": {},
   "source": [
    "## Construct data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "599e8c2d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def get_limits(series):\n",
    "    \n",
    "    '''Function to extract longest run of non NaN values. Code adapted from: https://stackoverflow.com/a/41494706'''\n",
    "    \n",
    "    # Extract out relevant column from dataframe as array\n",
    "    values = series.values\n",
    "    \n",
    "    # Mask\n",
    "    mask = np.concatenate(( [True], np.isnan(values), [True] ))\n",
    "    \n",
    "    # Start-stop limits\n",
    "    limits = np.flatnonzero(mask[1:] != mask[:-1]).reshape(-1,2)\n",
    "    \n",
    "    # Get max interval, interval limits\n",
    "    start,stop = limits[(limits[:,1] - limits[:,0]).argmax()]\n",
    "    \n",
    "    return start,stop\n",
    "\n",
    "\n",
    "def get_data_frame(df,indicators,show_not_available=False):\n",
    "    \n",
    "    '''Produce a DataFrame with the desired indicators'''\n",
    "    \n",
    "    # Initialize DataFrame\n",
    "    data = pd.DataFrame()\n",
    "    \n",
    "    # Columns\n",
    "    new_columns = pd.Series(\n",
    "        ['money growth','inflation','gdp growth','exchange rate depreciation','nominal interest rate'],\n",
    "        index=['broad money','gdp deflator','real gdp','exchange rate','lending rate']\n",
    "    )\n",
    "    \n",
    "    \n",
    "    for n, value in enumerate(df.groupby(level=0)):\n",
    "        country, country_df = value\n",
    "        \n",
    "        try:\n",
    "            \n",
    "            column_sum = country_df[indicators].sum(axis=1,skipna=False)\n",
    "            start,stop = get_limits(column_sum)\n",
    "            \n",
    "            if stop-start>=10:\n",
    "                data.loc[n,'country'] = country\n",
    "                try:\n",
    "                    data.loc[n,'iso code'] = countries[countries['country name']==country].index[0]\n",
    "                except:\n",
    "                    print('Cannot find iso code for '+country)\n",
    "                data.loc[n,'observations'] = stop - start\n",
    "                \n",
    "                \n",
    "                for ind in indicators:\n",
    "                    \n",
    "                    if ind == 'lending rate':\n",
    "                        \n",
    "                        data.loc[n,new_columns[ind]] = np.mean(country_df[ind].iloc[start:stop])/100\n",
    "\n",
    "                    else:    \n",
    "                        data.loc[n,new_columns[ind]] = (country_df[ind].iloc[stop-1]/country_df[ind].iloc[start])**(1/(stop-start-1))-1\n",
    "            \n",
    "                data.loc[n,'income group'] = countries[countries['country name']==country]['income group'].iloc[0]\n",
    "                data.loc[n,'oecd'] = countries[countries['country name']==country]['oecd'].iloc[0]\n",
    "        except:\n",
    "            if show_not_available==True:\n",
    "                print('Data not available for: ',country)\n",
    "            \n",
    "\n",
    "    return data\n",
    "\n",
    "# Closed economy data\n",
    "quantity_theory_data = get_data_frame(df,indicators = ['broad money','gdp deflator','real gdp'],show_not_available=False)\n",
    "\n",
    "# Export closed economy data\n",
    "quantity_theory_data.to_csv('../csv/quantity_theory_data.csv',index=False)\n",
    "\n",
    "# Open economy data\n",
    "quantity_theory_data_open = get_data_frame(df,indicators = ['broad money','gdp deflator','real gdp','lending rate','exchange rate'],show_not_available=False)\n",
    "\n",
    "# Export open economy data\n",
    "quantity_theory_data_open.to_csv('../csv/quantity_theory_data_open.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd6427c5",
   "metadata": {},
   "source": [
    "## Figures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "18d52bd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Figure for my website\n",
    "p_low = quantity_theory_data[quantity_theory_data['income group']=='low']['inflation']\n",
    "m_low = quantity_theory_data[quantity_theory_data['income group']=='low']['money growth']\n",
    "p_medium = quantity_theory_data[quantity_theory_data['income group']=='middle']['inflation']\n",
    "m_medium = quantity_theory_data[quantity_theory_data['income group']=='middle']['money growth']\n",
    "p_high = quantity_theory_data[quantity_theory_data['income group']=='high']['inflation']\n",
    "m_high = quantity_theory_data[quantity_theory_data['income group']=='high']['money growth']\n",
    "\n",
    "fig = plt.figure()\n",
    "\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "\n",
    "ax.plot(m_high,p_high,'bo',label='low income')\n",
    "ax.plot(m_medium,p_medium,'gs',label='med. income')\n",
    "ax.plot(m_low,p_low,'r^',label='high income')\n",
    "\n",
    "xlim = ax.get_xlim()\n",
    "ylim = ax.get_ylim()\n",
    "\n",
    "ax.set_xlabel('Money growth (%)',fontsize=12)\n",
    "ax.set_ylabel('Inflation (%)',fontsize=12)\n",
    "\n",
    "ax.plot(xlim,np.array(xlim)-quantity_theory_data['gdp growth'].mean(),'b-',label='$45^{\\\\circ}$')\n",
    "\n",
    "ax.legend(loc='center left', bbox_to_anchor=(1, 0.5),numpoints=1)\n",
    "\n",
    "ax.grid(linestyle=':')\n",
    "\n",
    "plt.savefig('../png/money_inflation_by_income.png',bbox_inches='tight',dpi=120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7e46b2b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = quantity_theory_data['inflation']\n",
    "m = quantity_theory_data['money growth']\n",
    "codes = quantity_theory_data['iso code']\n",
    "fig = plt.figure()\n",
    "\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "for i in quantity_theory_data.index:\n",
    "    \n",
    "    if codes[i] =='USA':\n",
    "        usa_index = i\n",
    "    else:\n",
    "        plt.text(m[i], p[i], codes[i], color=\"#11557c\",fontsize=12, clip_on=True,horizontalalignment='center',verticalalignment='center',alpha = 0.5)\n",
    "plt.text(m[usa_index], p[usa_index], codes[usa_index], color='red',fontsize=12, clip_on=True,horizontalalignment='center',verticalalignment='center',alpha = 1)\n",
    "ax.axis([-0.2, 1.4, -0.2, 1.4])\n",
    "\n",
    "xlim = ax.get_xlim()\n",
    "ylim = ax.get_ylim()\n",
    "ax.plot(xlim,np.array(xlim)-quantity_theory_data['gdp growth'].mean(),'b-',label='$45^{\\\\circ}$')\n",
    "\n",
    "ax.set_xlabel('money growth')\n",
    "ax.set_ylabel('inflation')\n",
    "ax.legend(loc='center left', bbox_to_anchor=(1, 0.5),numpoints=1)\n",
    "\n",
    "\n",
    "ax.grid(linestyle=':')\n",
    "\n",
    "plt.tight_layout()\n",
    "# # plt.savefig('../png/fig_money_inflation_coded.png',bbox_inches='tight',dpi=120)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d27ca8a-9459-4746-9d7e-a2009ebce0b6",
   "metadata": {},
   "source": [
    "## Save metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "05f79e4c-05cc-4ad8-8b6c-fce8bf127c80",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = wbdata.get_data('NY.GDP.MKTP.KD', country=\"USA\")\n",
    "\n",
    "pd.Series({'first_date':data[-1]['date'],'last_date':data[0]['date']}).to_csv('../csv/quantity_theory_metadata.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0185017-17cb-4484-a542-05af56d5f9a7",
   "metadata": {},
   "source": [
    "## Delete cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8ee9f4a5-4a09-4883-8a7a-c7223ab7388a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get current user\n",
    "user = getpass.getuser()\n",
    "\n",
    "# Remove wbdata Cache\n",
    "shutil.rmtree('/Users/'+user+'/Library/Caches/wbdata')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
